namespace Dino.LocalizationKeyGenerator.Editor.Utility {    internal static class RegexHelper {        public const string Letter = @"\p{L}";        public const string UpperCase = @"[\p{Lu}\p{Lt}]";        public const string LowerCase = @"[\p{Ll}\p{Lm}\p{Lo}]";        public const string Digit = @"\d";        public const string Space = @"\s";        public const string End = "$";        private const string NotPrecededByPattern = @"(?<!{0})";        private const string NotFollowedByPattern = @"(?!{0})";        private const string RepeatAtLeastPattern = @"{0}{{{1},}}";        private const string RepeatExactlyPattern = @"{0}{{{1}}}";        private const string NotPattern = @"[^{0}]";        private const string AnyOfPattern = @"[{0}]";        public static string NotPrecededBy(string p) => string.Format(NotPrecededByPattern, p);        public static string NotFollowedBy(string p) => string.Format(NotFollowedByPattern, p);        public static string RepeatAtLeast(string p, int c) => string.Format(RepeatAtLeastPattern, p, c);        public static string RepeatExactly(string p, int c) => string.Format(RepeatExactlyPattern, p, c);        public static string Not(string p) => string.Format(NotPattern, p);        public static string AnyOf(string p1, string p2) => string.Format(AnyOfPattern, string.Concat(p1, p2));        public static string AnyOf(string p1, string p2, string p3) => string.Format(AnyOfPattern, string.Concat(p1, p2, p3));        public static string AnyOf(string p1, string p2, string p3, string p4) => string.Format(AnyOfPattern, string.Concat(p1, p2, p3, p4));        public static string AnyOf(params string[] ps) => string.Format(AnyOfPattern, string.Concat(ps));    }}